# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

  variables:
  - name: imageName
    value: jekyll/builder
  - name: jekyllVersion
    value: 3.8

steps:
# Checkout is done automatically but here for readability
- checkout: self

# Why was this build executed
- bash: |
    case $BUILD_REASON in
            "Manual") echo "$BUILD_REQUESTEDFOR manually queued the build." ;;
            "IndividualCI") echo "This is a CI build for $BUILD_REQUESTEDFOR." ;;
            "BatchedCI") echo "This is a batched CI build for $BUILD_REQUESTEDFOR." ;;
        *) $BUILD_REASON ;;
    esac
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Get Build Reason

- script: |
    GIT_COMMIT=$( git rev-parse --short HEAD )
    VERSION=$( cat VERSION )
    echo "##vso[task.setvariable variable=commitHash;isOutput=true]$GIT_COMMIT"
    echo "##vso[task.setvariable variable=version;isOutput=true]$VERSION"
  name: setVar
  displayName: Set runtime variables for pipeline

#- script: |
#    VERSION=$( cat VERSION )
#    echo "##vso[task.setvariable variable=version;isOutput=true]$VERSION"
#  name: setVersion

# Build and Push container to DockerHub
- script: |
    echo "GIT_COMMIT: $(setVar.commitHash)"
    echo "VERSION=$(setVar.version)"
  displayName: Echo pipeline dynamic variables

# Build Jekyll Website
- script: |
    mkdir _site
    touch Gemfile.lock
    chmod a+w Gemfile.lock
    echo ""
    ls -la 
    echo "Docker Run"
    docker run --rm \
        --volume="$PWD:/srv/jekyll" \
        --volume="$PWD/vendor/bundle:/usr/local/bundle" \
        -i jekyll/builder:3.8 \
        jekyll build
    echo ""
    echo "Output"
    ls -la _site


# Copy Website to Storage Acct# Copy Website to Storage Acct
# Azure CLI
# Publish website to ACI
#- task: AzureCLI@1
#  inputs:
#    azureSubscription: python-saml-app
#    scriptLocation: inlineScript
#    inlineScript: |
#      echo "Running az script."
#      az container create -n saml-flask -g python-saml-app --image emcconne/saml-flask:$(setVar.commitHash) --ports 5000 --dns-name-label saml-flask 
#  displayName: Copy to website

# Azure file copy
# Copy files to Azure Blob Storage or virtual machines
- task: AzureFileCopy@3
  inputs:
    sourcePath: _site
    azureSubscription: python-saml-app
    destination: AzureBlob
    storage: azurepatterns
    containerName: $web 
    #blobPrefix: # Optional
    resourceGroup: # azurepatterns
    #resourceFilteringMethod: 'machineNames' # Optional. Options: machineNames, tags
    #machineNames: # Optional
    #vmsAdminUserName: # Required when destination == AzureVMs
    #vmsAdminPassword: # Required when destination == AzureVMs
    #targetPath: # Required when destination == AzureVMs
    #additionalArgumentsForBlobCopy: # Optional
    #additionalArgumentsForVMCopy: # Optional
    #enableCopyPrerequisites: false # Optional
    #copyFilesInParallel: true # Optional
    #cleanTargetBeforeCopy: false # Optional
    #skipCACheck: true # Optional
    #outputStorageUri: # Optional
    #outputStorageContainerSasToken: # Optional
    #sasTokenTimeOutInMinutes: # Optional

